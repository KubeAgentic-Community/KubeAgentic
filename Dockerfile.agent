# Multi-stage build for optimized image size
# Build stage - use full Python environment for dependency installation
FROM registry.access.redhat.com/ubi9/python-311:latest AS builder

# Set environment variables for build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Switch to root to create venv in system location
USER root

# Create virtual environment to contain dependencies
RUN python -m venv /opt/venv && \
    chmod -R 755 /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install dependencies
COPY agent/requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Runtime stage - use minimal base image  
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

# Install Python runtime using microdnf
RUN microdnf install -y python3.11 python3.11-libs && \
    microdnf clean all

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PORT=8080 \
    PATH="/opt/venv/bin:$PATH"

# Set work directory and copy application
WORKDIR /app
COPY agent/main.py .

# Use non-root user (ubi-micro default user)
USER 1001

# Expose port
EXPOSE ${PORT}

# Run the application
CMD ["python", "main.py"]